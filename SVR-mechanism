import numpy as np
from sklearn.decomposition import PCA
from sklearn import svm
import sys
import csv
#===================================================
#reading all pattern to pattern variable
#===================================================
pattern=list()
fhd=csv.reader(open('pattern.csv','r'))
for line in fhd:
    pattern.append(line)

#===================================================
#reading test pattern to raw_test variable
#===================================================
raw_test=list()
fhd=csv.reader(open('test.csv','r'))
for line in fhd:
    raw_test.append(line)

#===================================================
#conducting pca
#===================================================
n=8
pattern= np.array(pattern, dtype='float64')
pca_r = PCA(n_components=n)
pca_r.fit(pattern)
pattern_r=pca_r.transform(pattern)
pattern_r=pattern_r.tolist()

raw_test=np.array(raw_test, dtype='float64')
raw_test=pca_r.transform(raw_test)
raw_test=raw_test.tolist()

#===================================================
#reading regression label to label_r
#===================================================
label_r=list()
fhl=csv.reader(open('label_C.csv','r'))
for line in fhl:
    label_r.append(line)
label_r=np.array(label_r,dtype='float64')
label_r=label_r.tolist()

#===================================================
#regression training set preparaton
#===================================================
raw_train_r=list()
label_train_r=list()
i,j=1,1
for line in pattern_r:
    if i==4:
        i=1
    else:
        raw_train_r.append(line)
        i=i+1
for line in label_r:
    if j==4:
        j=1
    else:
        label_train_r.append(line)
        j=j+1

#===================================================
#training regression model as reg
#===================================================
reg=svm.SVR(kernel='linear')
reg.fit(raw_train_r,label_train_r)
label_predict_r=reg.predict(raw_test)
label_predict_r=label_predict_r.tolist()

#===================================================
#get the final predict result and save it to label_predict.csv
#===================================================
output=csv.writer(open('predict_C.csv','a',newline=''),dialect='excel')
output.writerows(map(lambda x:[x],label_predict_r))
